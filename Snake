<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Nokia Snake Game</title>
<style>
* { margin: 0; padding: 0; box-sizing: border-box; }
body {
    background: #000;
    color: #0f0;
    font-family: 'Courier New', monospace;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding: 20px;
}
.game-container { text-align: center; max-width: 500px; width: 100%; position: relative; }
.score-board { display: flex; justify-content: space-between; margin-bottom: 20px; font-size: 18px; font-weight: bold; }
#gameCanvas { border: 2px solid #0f0; background: #111; display: block; margin: 0 auto; max-width: 100%; }
.game-over { margin: 20px 0; font-size: 24px; color: #f00; display: none; }
.controls {
    display: grid;
    grid-template-columns: repeat(3, 60px);
    grid-template-rows: repeat(3, 60px);
    gap: 10px;
    margin-top: 20px;
}
.control-btn {
    background: #0f0;
    color: #000;
    border: none;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    border-radius: 8px;
    transition: background 0.2s;
    user-select: none;
    touch-action: manipulation;
}
.control-btn:active { background: #0c0; transform: scale(0.95); }
.control-btn:nth-child(1) { grid-column: 2; grid-row: 1; } /* Up */
.control-btn:nth-child(2) { grid-column: 1; grid-row: 2; } /* Left */
.control-btn:nth-child(3) { grid-column: 3; grid-row: 2; } /* Right */
.control-btn:nth-child(4) { grid-column: 2; grid-row: 3; } /* Down */
.instructions { margin-top: 20px; font-size: 14px; color: #888; line-height: 1.5; }
@media (max-width: 600px) {
    .score-board { font-size: 16px; }
    .game-over { font-size: 20px; }
    .instructions { font-size: 12px; }
    .controls { grid-template-columns: repeat(3, 50px); grid-template-rows: repeat(3, 50px); gap: 8px; }
    .control-btn { font-size: 20px; }
}
</style>
</head>
<body>
<div class="game-container">
    <div class="score-board">
        <div>Score: <span id="score">0</span></div>
        <div>High Score: <span id="highScore">0</span></div>
    </div>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <div class="game-over" id="gameOver">
        <div>Game Over!</div>
        <button class="restart-btn" onclick="restartGame()">Play Again</button>
    </div>

    <div class="instructions">
        <div><strong>Desktop:</strong> Use arrow keys to move</div>
        <div><strong>Mobile:</strong> Use the buttons below</div>
    </div>

    <!-- Mobile Controls -->
    <div class="controls">
        <button class="control-btn" onclick="changeDirection('up')">⬆️</button>
        <button class="control-btn" onclick="changeDirection('left')">⬅️</button>
        <button class="control-btn" onclick="changeDirection('right')">➡️</button>
        <button class="control-btn" onclick="changeDirection('down')">⬇️</button>
    </div>
</div>
    
    <style>
/* Center controls */
.controls {
    display: grid;
    grid-template-columns: repeat(3, 60px);
    grid-template-rows: repeat(3, 60px);
    gap: 10px;
    margin: 20px auto 0;
    justify-content: center; /* Center horizontally */
}

/* Control buttons style */
.control-btn {
    background: #0f0;
    color: #000;
    border: none;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    border-radius: 12px;
    transition: all 0.2s;
    user-select: none;
    touch-action: manipulation;
}
.control-btn:active {
    background: #0c0;
    transform: scale(0.95);
}

/* Game over overlay styling */
.game-over {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0,0,0,0.9);
    border: 2px solid #0f0;
    padding: 30px 40px;
    border-radius: 16px;
    text-align: center;
    color: #f00;
    font-size: 24px;
    display: none;
    z-index: 10;
}

/* Stylish restart button */
.restart-btn {
    margin-top: 20px;
    background: linear-gradient(135deg, #00ff00, #00cc00);
    border: none;
    padding: 12px 24px;
    font-size: 18px;
    font-weight: bold;
    color: #000;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s;
}
.restart-btn:hover {
    background: linear-gradient(135deg, #00cc00, #009900);
    transform: scale(1.05);
}
.restart-btn:active {
    transform: scale(0.95);
}
</style>

<script>
// Game variables
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const scoreElement = document.getElementById('score');
const highScoreElement = document.getElementById('highScore');
const gameOverElement = document.getElementById('gameOver');

const gridSize = 20;
const tileCount = canvas.width / gridSize;

let snake = [{x: 10, y: 10}];
let food = {};
let dx = 1; // snake starts moving right
let dy = 0;
let score = 0;
let highScore = localStorage.getItem('snakeHighScore') || 0;
let gameRunning = true;

highScoreElement.textContent = highScore;

function randomFood() {
    food = {
        x: Math.floor(Math.random() * tileCount),
        y: Math.floor(Math.random() * tileCount)
    };
}

function drawGame() {
    ctx.fillStyle = '#111';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw snake
    ctx.fillStyle = '#0f0';
    for (let part of snake) {
        ctx.fillRect(part.x * gridSize, part.y * gridSize, gridSize - 2, gridSize - 2);
    }

    // Draw food
    ctx.fillStyle = '#f00';
    ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);
}

function moveSnake() {
    if (!gameRunning) return;

    const head = {x: snake[0].x + dx, y: snake[0].y + dy};

    // Wall collision
    if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
        gameOver();
        return;
    }

    // Self collision
    for (let part of snake) {
        if (head.x === part.x && head.y === part.y) {
            gameOver();
            return;
        }
    }

    snake.unshift(head);

    // Food collision
    if (head.x === food.x && head.y === food.y) {
        score += 10;
        scoreElement.textContent = score;
        randomFood();
        if (score > highScore) {
            highScore = score;
            highScoreElement.textContent = highScore;
            localStorage.setItem('snakeHighScore', highScore);
        }
    } else {
        snake.pop();
    }
}

function gameOver() {
    gameRunning = false;
    gameOverElement.style.display = 'block';
}

function restartGame() {
    snake = [{x: 10, y: 10}];
    dx = 1;
    dy = 0;
    score = 0;
    scoreElement.textContent = score;
    gameRunning = true;
    gameOverElement.style.display = 'none';
    randomFood();
}

function changeDirection(direction) {
    if (!gameRunning) return;

    switch(direction) {
        case 'up': if (dy !== 1) { dx = 0; dy = -1; } break;
        case 'down': if (dy !== -1) { dx = 0; dy = 1; } break;
        case 'left': if (dx !== 1) { dx = -1; dy = 0; } break;
        case 'right': if (dx !== -1) { dx = 1; dy = 0; } break;
    }
}

// Keyboard controls
document.addEventListener('keydown', (e) => {
    if (!gameRunning) return;
    switch(e.key) {
        case 'ArrowUp': e.preventDefault(); changeDirection('up'); break;
        case 'ArrowDown': e.preventDefault(); changeDirection('down'); break;
        case 'ArrowLeft': e.preventDefault(); changeDirection('left'); break;
        case 'ArrowRight': e.preventDefault(); changeDirection('right'); break;
    }
});

// Game loop
function gameLoop() {
    moveSnake();
    drawGame();
}

// Initialize
randomFood();
setInterval(gameLoop, 150);
</script>
</body>
</html>
